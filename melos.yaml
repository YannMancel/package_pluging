name: package_pluging
repository: https://github.com/YannMancel/package_pluging

packages:
  - projects/**

command:
  version:
    # Generate commit links in package changelogs.
    linkToCommits: true
    # # Only allow versioning to happen on main branch.
    # branch: master
    # Additionally build a changelog at the root of the workspace.
    workspaceChangelog: true

  bootstrap:
    # It seems so that running "pub get" in parallel has some issues (like
    # https://github.com/dart-lang/pub/issues/3404). Disabling this feature
    # makes the CI much more stable.
    runPubGetInParallel: false
    usePubspecOverrides: true

scripts:

  # Additional cleanup lifecycle script, executed when `melos clean` is run.
  postclean: >
    melos exec --concurrency=6 -- "flutter clean"

  ##
  ## -----------------------------------------------------------------------------------------------
  ## LINT
  ## -----------------------------------------------------------------------------------------------
  ##

  lint:all:
    run: |
      melos run analyze && \
      melos run format
    description: Run all static analysis checks.

  format:
    run: |
      melos exec --concurrency=1 --fail-fast -- \
        dart format --output=none --set-exit-if-changed .
    description: |
      Run `dart format` in all packages.

  analyze:
    # We are setting the concurrency to 1 because a higher concurrency can crash
    # the analysis server on low performance machines (like GitHub Actions).
    run: |
      melos exec --concurrency=1 --fail-fast -- \
        dart analyze . --fatal-infos
    description: |
      Run `dart analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  ##
  ## -----------------------------------------------------------------------------------------------
  ## TEST
  ## -----------------------------------------------------------------------------------------------
  ##

  test:
    run: melos run test:flutter --no-select
    description: Run tests in all packages.

  test:flutter:
    run: |
      melos exec --concurrency=1 --fail-fast -- \
        flutter test \
          --coverage \
          --test-randomize-ordering-seed random
    description: |
      Run `flutter test` in all flutter packages.
    packageFilters:
      flutter: true
      dirExists: test
      ignore: "*example*"

  test:flutterWithHtmlCoverage:
    run: |
      melos exec --concurrency=1 --fail-fast -- \
        flutter test --coverage --test-randomize-ordering-seed random --reporter expanded && genhtml coverage/lcov.info --output-directory coverage/html && open coverage/html/index.html
    description: |
      Run `flutter test` in all flutter packages with HTML coverage.
    packageFilters:
      flutter: true
      dirExists: test
      ignore: "*example*"
